pipeline {
    agent {
      kubernetes {
        defaultContainer 'jnlp'
        yamlFile 'jenkins/k8s-ci-pod.yaml'
      }
    }
    options {
      disableConcurrentBuilds()
      skipStagesAfterUnstable()
    }
    environment {
      SlackChannel = '#jenkins-ci-mv-opentelemetry'
      MIX_ENV = 'test'
      POSTGRES_USER = 'ubuntu'
      POSTGRES_PASSWORD = 'ubuntupassword'
      POSTGRES_HOST = 'localhost'
    }

    stages {
      stage('Install dependencies') {
        steps {
          container('ci-container') {
            sh '''
              (test -f SHASUMS && shasum -c SHASUMS) || git clean -fdx
              mix local.hex --force
              mix local.rebar --force
              (test -f SHASUMS && shasum -c SHASUMS) || mix do deps.get
              shasum mix.lock > SHASUMS
            '''
          }
        }
      }

      stage('Run pre-checks') {
        steps {
          container('ci-container') {
            sh '''
              mix local.hex --force
              mix local.rebar --force
              mix format --check-formatted
            '''
            sh '''
              mix local.hex --force
              mix local.rebar --force
              mix credo --strict
            '''
            sh '''
              mix local.hex --force
              mix local.rebar --force
              mix dialyzer
            '''
          }
        }
      }

      stage('Run mv-opentelemetry tests') {
        steps {
          container('ci-container') {
            sh '''
              wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
              sudo apt-get update
              sudo apt-get install -y postgresql-client
              mix local.hex --force
              mix local.rebar --force
              mix test
            '''
          }
        }

        post {
          always {
            script {
              commit = sh(returnStdout: true, script: 'git rev-parse HEAD')
              author = sh(returnStdout: true, script: "git --no-pager show -s --format='%an' ${commit}").trim()
              message = sh(returnStdout: true, script: 'git log -1 --pretty=format:%s').trim()
              slack_commit_msg = "\n*Trigger: * `${env.JOB_NAME}` #${env.BUILD_NUMBER}\n*Info: * ${env.BUILD_URL}\n*GitHub: * ${message} -> (`${commit.take(9)}` by ${author})"
            }
          }
          success {
            slackSend (
              channel: env.SlackChannel,
              color: '#00FF00',
              message: "Hurray! CI tests *Success* ${slack_commit_msg}"
            )
          }
          failure {
            slackSend (
              channel: env.SlackChannel,
              color: '#FF0000',
              message: "Oops, something's wrong; CI *Failed* ${slack_commit_msg}"
            )
          }
        }
      }
    }
}
